(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('prop-types'), require('axios')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'prop-types', 'axios'], factory) :
  (global = global || self, factory(global.countdown = {}, global.React, global.PropTypes, global.axios));
}(this, function (exports, React, PropTypes, axios) { 'use strict';

  var React__default = 'default' in React ? React['default'] : React;
  PropTypes = PropTypes && PropTypes.hasOwnProperty('default') ? PropTypes['default'] : PropTypes;
  axios = axios && axios.hasOwnProperty('default') ? axios['default'] : axios;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  var isEqual = function isEqual(value, other) {
    // Get the value type
    var type = Object.prototype.toString.call(value); // If the two objects are not the same type, return false

    if (type !== Object.prototype.toString.call(other)) {
      return false;
    } // If items are not an object or array, return false


    if (['[object Array]', '[object Object]'].indexOf(type) < 0) {
      return false;
    } // Compare the length of the length of the two items


    var valueLen = type === '[object Array]' ? value.length : Object.keys(value).length;
    var otherLen = type === '[object Array]' ? other.length : Object.keys(other).length;

    if (valueLen !== otherLen) {
      return false;
    } // Compare two items


    var compare = function compare(item1, item2) {
      // Get the object type
      var itemType = Object.prototype.toString.call(item1); // If an object or array, compare recursively

      if (['[object Array]', '[object Object]'].indexOf(itemType) >= 0) {
        if (!isEqual(item1, item2)) {
          return false;
        }
      } else {
        // Otherwise, do a simple comparison
        // If the two items are not the same type, return false
        if (itemType !== Object.prototype.toString.call(item2)) {
          return false;
        } // Else if it's a function, convert to a string and compare
        // Otherwise, just compare


        if (itemType === '[object Function]') {
          if (item1.toString() !== item2.toString()) {
            return false;
          }
        } else {
          if (item1 !== item2) {
            return false;
          }
        }
      }
    }; // Compare properties


    if (type === '[object Array]') {
      for (var i = 0; i < valueLen; i++) {
        if (compare(value[i], other[i]) === false) {
          return false;
        }
      }
    } else {
      for (var key in value) {
        if (value.hasOwnProperty(key)) {
          if (compare(value[key], other[key]) === false) {
            return false;
          }
        }
      }
    }

    return true;
  };
  var isFunction = function isFunction(functionToCheck) {
    if (functionToCheck && {}.toString.call(functionToCheck) === '[object Function]') {
      return true;
    } else {
      console.warn("Please provide a valid function to");
      return false;
    }
  };
  var uriBuilder = function uriBuilder(uri, key, value) {
    var prefix = uri[uri.length - 1] === '/' ? '?' : '&';
    var uriCopy = uri;

    if (uri.charAt(uri.length - 1) === '/') {
      uriCopy = uri.slice(0, -1);
    }

    return "".concat(uriCopy).concat(prefix).concat(key, "=").concat(value);
  };

  var Patables =
  /*#__PURE__*/
  function (_Component) {
    _inherits(Patables, _Component);

    function Patables(props) {
      var _this;

      _classCallCheck(this, Patables);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Patables).call(this, props));
      _this.state = {
        search: '',
        searchKeys: _this.props.searchKeys || [],
        currentPage: _this.props.startingPage || 1,
        resultSet: _this.props.resultSet || 10,
        totalPages: Math.ceil(_this.props.initialData.length / _this.props.resultSet),
        initialData: _this.props.initialData || [],
        sortColumn: _this.props.sortColumn || '',
        sortOrder: _this.props.sortOrder || 'asc',
        pageNeighbors: _this.props.pageNeighbors || 2
      };
      _this.setSearchTerm = _this.setSearchTerm.bind(_assertThisInitialized(_this));
      _this.searchFilter = _this.searchFilter.bind(_assertThisInitialized(_this));
      _this.sortByColumn = _this.sortByColumn.bind(_assertThisInitialized(_this));
      _this.setColumnSortToggle = _this.setColumnSortToggle.bind(_assertThisInitialized(_this));
      _this.setPageNumber = _this.setPageNumber.bind(_assertThisInitialized(_this));
      _this.setResultSet = _this.setResultSet.bind(_assertThisInitialized(_this));
      _this.getVisibleData = _this.getVisibleData.bind(_assertThisInitialized(_this));
      _this.range = _this.range.bind(_assertThisInitialized(_this));
      _this.getPagination = _this.getPagination.bind(_assertThisInitialized(_this));
      _this.getRenderProps = _this.getRenderProps.bind(_assertThisInitialized(_this));
      return _this;
    } // LIFECYCLE METHODS


    _createClass(Patables, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this.state.initialData.length > 0) {
          var totalPages = Math.ceil(this.state.initialData.length / this.state.resultSet);
          this.setState(function () {
            return {
              totalPages: totalPages
            };
          });
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps, prevState) {
        if (!isEqual(prevProps.initialData, this.props.initialData)) {
          var initialData = this.props.initialData;
          var totalPages = Math.ceil(initialData.length / this.state.resultSet);
          this.setState(function () {
            return {
              initialData: initialData,
              totalPages: totalPages
            };
          });
        }
      } // SEARCHING

    }, {
      key: "setSearchTerm",
      value: function setSearchTerm(e) {
        var search = e.target.value;
        this.setState(function () {
          return {
            search: search
          };
        });
      }
    }, {
      key: "searchFilter",
      value: function searchFilter(arr, searchTerm, searchkeys) {
        // if searchkeys aren't provided use the keys off the first object in array by default
        var searchKeys = searchkeys.length === 0 ? Object.keys(arr[0]) : searchkeys;
        var filteredArray = arr.filter(function (obj) {
          return searchKeys.some(function (key) {
            if (obj[key] === null || obj[key] === undefined) {
              return false;
            }

            return obj[key].toString().toLowerCase().includes(searchTerm.toLowerCase());
          });
        }); // Resetting the total pages based on filtered data

        var totalPages = Math.ceil(filteredArray.length / this.state.resultSet);
        console.log('totalPages: ', totalPages);
        console.log('filteredArray: ', filteredArray);

        if (totalPages !== this.state.totalPages) {
          this.setState(function () {
            return {
              totalPages: totalPages,
              currentPage: 1
            };
          });
        }

        return filteredArray;
      } // SORTING

    }, {
      key: "sortByColumn",
      value: function sortByColumn(array) {
        var _this2 = this;

        var order = this.state.sortOrder.toLowerCase();
        return array.sort(function (a, b) {
          var x = a[_this2.state.sortColumn];
          var y = b[_this2.state.sortColumn];

          if (typeof x === 'string') {
            x = ('' + x).toLowerCase();
          }

          if (typeof y === 'string') {
            y = ('' + y).toLowerCase();
          }

          if (order === 'desc') {
            return x < y ? 1 : x > y ? -1 : 0;
          } else {
            return x < y ? -1 : x > y ? 1 : 0;
          }
        });
      }
    }, {
      key: "setColumnSortToggle",
      value: function setColumnSortToggle(e) {
        var sortColumn = e.target.getAttribute('name');
        var sortOrder = this.state.sortOrder;

        if (sortColumn === this.state.sortColumn) {
          sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
        } else {
          sortOrder = 'asc';
        }

        this.setState(function () {
          return {
            sortColumn: sortColumn,
            sortOrder: sortOrder
          };
        });
      } // CURRENT PAGE

    }, {
      key: "setPageNumber",
      value: function setPageNumber(currentPage) {
        this.setState(function () {
          return {
            currentPage: currentPage
          };
        });
      } // RESULT SET

    }, {
      key: "setResultSet",
      value: function setResultSet(value) {
        var resultSet = value;

        if (typeof resultSet === 'string') {
          resultSet = parseInt(resultSet);
        }

        var totalPages = Math.ceil(this.state.initialData.length / resultSet);
        var currentPage = totalPages >= this.state.currentPage ? this.state.currentPage : 1;
        this.setState(function () {
          return {
            resultSet: resultSet,
            totalPages: totalPages,
            currentPage: currentPage
          };
        });
      } // VISIBLE DATA

    }, {
      key: "getVisibleData",
      value: function getVisibleData() {
        var _this$state = this.state,
            initialData = _this$state.initialData,
            currentPage = _this$state.currentPage,
            resultSet = _this$state.resultSet,
            search = _this$state.search,
            searchKeys = _this$state.searchKeys;
        var offset = (currentPage - 1) * parseInt(resultSet);
        var topOfRange = offset + parseInt(resultSet); // searchFilter will return a result set where the searchTerm matches the designated searchKeys

        if (this.state.search !== '') {
          initialData = this.searchFilter(initialData, search, searchKeys);
        } else {
          var totalPages = Math.ceil(initialData.length / this.state.resultSet);

          if (totalPages !== this.state.totalPages) {
            this.setState(function () {
              return {
                totalPages: totalPages,
                currentPage: 1
              };
            });
          }
        } // sortByColumn will return a result set which is ordered by sortColumn and sortOrder


        if (this.state.sortColumn !== '') {
          initialData = this.sortByColumn(initialData);
        } // reducing the result set down to one page worth of data


        return initialData.filter(function (d, i) {
          var visibleData = i >= offset && i < topOfRange;
          return visibleData;
        });
      } // PAGINATION

    }, {
      key: "range",
      value: function range(start, end) {
        var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var i = start;
        var range = [];

        while (i <= end) {
          range.push(i);
          i += step;
        }

        return range;
      }
    }, {
      key: "getPagination",
      value: function getPagination() {
        var _this$state2 = this.state,
            currentPage = _this$state2.currentPage,
            totalPages = _this$state2.totalPages,
            pageNeighbors = _this$state2.pageNeighbors;
        var totalNumbers = pageNeighbors * 2 + 1;
        var pages = [];

        if (totalPages > totalNumbers) {
          var startPage, endPage;

          if (currentPage <= pageNeighbors + 1) {
            startPage = 1;
            endPage = pageNeighbors * 2 + 1;
          } else if (currentPage > totalPages - pageNeighbors) {
            startPage = totalPages - pageNeighbors * 2;
            endPage = totalPages;
          } else {
            startPage = currentPage - pageNeighbors;
            endPage = currentPage + pageNeighbors;
          }

          pages = this.range(startPage, endPage);
        } else {
          pages = this.range(1, totalPages);
        }

        return pages;
      } // CREATING PROPS

    }, {
      key: "getRenderProps",
      value: function getRenderProps() {
        return _objectSpread2({}, this.state, {
          setColumnSortToggle: this.setColumnSortToggle,
          setPageNumber: this.setPageNumber,
          setResultSet: this.setResultSet,
          setSearchTerm: this.setSearchTerm,
          nextDisabled: this.state.totalPages === this.state.currentPage,
          prevDisabled: this.state.currentPage === 1,
          visibleData: this.getVisibleData(),
          paginationButtons: this.getPagination()
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            render = _this$props.render;
        var renderProps = this.getRenderProps();

        var renderComp = function renderComp() {
          if (render && isFunction(render)) {
            return render(renderProps);
          } else if (children && isFunction(children)) {
            return children(renderProps);
          } else {
            console.warn('Please provide a valid render prop or child.');
            return undefined;
          }
        };

        return React__default.createElement("div", null, renderComp());
      }
    }]);

    return Patables;
  }(React.Component);
  Patables.propTypes = {
    render: PropTypes.func,
    children: PropTypes.func,
    initialData: PropTypes.array.isRequired,
    resultSet: PropTypes.number,
    startingPage: PropTypes.number,
    sortColumn: PropTypes.string,
    sortOrder: PropTypes.string,
    pageNeighbors: PropTypes.number,
    searchKeys: PropTypes.array
  };

  var PatablesAsync =
  /*#__PURE__*/
  function (_Component) {
    _inherits(PatablesAsync, _Component);

    function PatablesAsync(props) {
      var _this;

      _classCallCheck(this, PatablesAsync);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(PatablesAsync).call(this, props));

      _defineProperty(_assertThisInitialized(_this), "getVisibleData", function () {
        // if (this.props.pageParam && this.props.pageParam.length === 2) {
        //   this.setState({ currentPage: this.props.pageParam[1] })
        // }
        // if (this.props.limitParam && this.props.limitParam.length === 2) {
        //   this.setState({ resultSet: this.props.limitParam[1] })
        // }
        // if (this.props.orderByParam && this.props.orderByParam.length === 2) {
        //   this.setState({ sortOrder: this.props.orderByParam[1] })
        // }
        var uri = _this.props.url;

        if (_this.props.pageParam) {
          uri = uriBuilder(uri, _this.props.pageParam[0], _this.state.currentPage);
        }

        if (_this.props.limitParam) {
          uri = uriBuilder(uri, _this.props.limitParam[0], _this.state.resultSet);
        }

        if (_this.props.searchParam) {
          uri = uriBuilder(uri, _this.props.searchParam[0], !_this.state.search ? _this.props.searchParam[1] : _this.state.search);
        }

        if (_this.props.apiKey) {
          uri = uriBuilder(uri, _this.props.apiKey[0], _this.props.apiKey[1]);
        }

        if (_this.props.sortParam) {
          uri = uriBuilder(uri, _this.props.sortParam[0], !_this.state.sortColumn ? _this.props.sortParam[1] : _this.state.sortColumn);
        }

        if (_this.props.orderByParam) {
          uri = uriBuilder(uri, _this.props.orderByParam[0], _this.state.sortOrder);
        }

        if (_this.props.customParam) {
          var param = _this.props.customParam;
          param.map(function (obj) {
            var paramVal = Object.values(obj);
            uri = uriBuilder(uri, paramVal[0], paramVal[1]);
          });
        } // if (this.props.showURI) {


        console.log('The URI is:', uri); // }

        _this.setState({
          isLoading: true
        }, function () {
          axios.get(uri, _this.props.config).then(function (response) {
            var finalData = _objectSpread2({}, response);

            _this.props.pathToData && _this.props.pathToData.forEach(function (key) {
              finalData = finalData[key];
            });

            var finalPageTotal = _objectSpread2({}, response);

            if (_this.props.pathToPageTotal) {
              _this.props.pathToPageTotal.forEach(function (key) {
                finalPageTotal = finalPageTotal[key];
              });
            }

            _this.setState({
              visibleData: finalData,
              totalPages: typeof finalPageTotal !== 'number' ? 1 : finalPageTotal
            });
          }).catch(function (err) {
            console.error('error:', err);
          }).finally(function () {
            _this.setState({
              isLoading: false
            });
          });
        });
      });

      _defineProperty(_assertThisInitialized(_this), "setColumnSortToggle", function (e) {
        var sortColumn = e.target.getAttribute('name');
        var sortOrder = _this.state.sortOrder;

        if (sortColumn === _this.state.sortColumn) {
          sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
        } else {
          sortOrder = 'asc';
        }

        _this.setState(function () {
          return {
            sortColumn: sortColumn,
            sortOrder: sortOrder
          };
        }, _this.getVisibleData);
      });

      _defineProperty(_assertThisInitialized(_this), "setSearchTerm", function (e) {
        var search = e.target.value;

        _this.setState(function () {
          return {
            search: search
          };
        });
      });

      _defineProperty(_assertThisInitialized(_this), "submitSearch", function () {
        if (_this.state.search && _this.props.searchParam) {
          _this.setState({
            currentPage: 1
          }, _this.getVisibleData);
        } else {
          console.warn('Warning🚨: Cannot search without searchParam.');
        }
      });

      _defineProperty(_assertThisInitialized(_this), "clearSearch", function () {
        _this.setState({
          search: '',
          currentPage: 1
        }, _this.getVisibleData);
      });

      _defineProperty(_assertThisInitialized(_this), "setPageNumber", function (currentPage) {
        _this.setState(function () {
          return {
            currentPage: currentPage
          };
        }, _this.getVisibleData);
      });

      _defineProperty(_assertThisInitialized(_this), "setResultSet", function (value) {
        var resultSet = value;

        if (typeof resultSet === 'string') {
          resultSet = parseInt(resultSet);
        }

        _this.setState({
          currentPage: 1,
          resultSet: resultSet
        }, _this.getVisibleData);
      });

      _defineProperty(_assertThisInitialized(_this), "range", function (start, end) {
        var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var i = start;
        var range = [];

        while (i <= end) {
          range.push(i);
          i += step;
        }

        return range;
      });

      _defineProperty(_assertThisInitialized(_this), "getRenderProps", function () {
        return _objectSpread2({}, _this.state, {
          setPageNumber: _this.setPageNumber,
          setColumnSortToggle: _this.setColumnSortToggle,
          setResultSet: _this.setResultSet,
          setSearchTerm: _this.setSearchTerm,
          nextDisabled: _this.state.totalPages === _this.state.currentPage,
          prevDisabled: _this.state.currentPage === 1,
          submitSearch: _this.submitSearch,
          clearSearch: _this.clearSearch,
          paginationButtons: _this.getPagination()
        });
      });

      _this.state = {
        visibleData: [],
        search: '',
        sortColumn: '',
        currentPage: _this.props.pageParam ? _this.props.pageParam[1] : 1,
        resultSet: _this.props.limitParam ? _this.props.limitParam[1] : '',
        sortOrder: _this.props.orderByParam ? _this.props.orderByParam[1] : '',
        pageNeighbors: _this.props.pageNeighbors || 2,
        totalPages: 1,
        isLoading: false
      };
      return _this;
    }

    _createClass(PatablesAsync, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.getVisibleData();
      }
    }, {
      key: "getPagination",
      value: function getPagination() {
        var _this$state = this.state,
            currentPage = _this$state.currentPage,
            totalPages = _this$state.totalPages,
            pageNeighbors = _this$state.pageNeighbors;
        var totalNumbers = pageNeighbors * 2 + 1;
        var pages = [];

        if (totalPages > totalNumbers) {
          var startPage, endPage;

          if (currentPage <= pageNeighbors + 1) {
            startPage = 1;
            endPage = pageNeighbors * 2 + 1;
          } else if (currentPage > totalPages - pageNeighbors) {
            startPage = totalPages - pageNeighbors * 2;
            endPage = totalPages;
          } else {
            startPage = currentPage - pageNeighbors;
            endPage = currentPage + pageNeighbors;
          }

          pages = this.range(startPage, endPage);
        } else {
          pages = this.range(1, totalPages);
        }

        return pages;
      } // CREATING PROPS

    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            render = _this$props.render;
        var renderProps = this.getRenderProps();

        var renderComp = function renderComp() {
          if (render && isFunction(render)) {
            return render(renderProps);
          } else if (children && isFunction(children)) {
            return children(renderProps);
          } else {
            console.warn('Please provide a valid render prop or child.');
            return undefined;
          }
        };

        return React__default.createElement("div", null, renderComp());
      }
    }]);

    return PatablesAsync;
  }(React.Component);
  PatablesAsync.propTypes = {
    children: PropTypes.func,
    render: PropTypes.func,
    pageNeighbors: PropTypes.number,
    url: PropTypes.string,
    config: PropTypes.object,
    apiKey: PropTypes.array,
    pageParam: PropTypes.array,
    limitParam: PropTypes.array,
    searchParam: PropTypes.array,
    orderByParam: PropTypes.array,
    sortParam: PropTypes.array,
    customParam: PropTypes.array,
    pathToData: PropTypes.array,
    pathToPageTotal: PropTypes.array // showURI: PropTypes.boolean

  };

  exports.Patables = Patables;
  exports.PatablesAsync = PatablesAsync;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
